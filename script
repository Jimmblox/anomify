loadstring(game:HttpGetAsync("https://raw.githubusercontent.com/Stefanuk12/ROBLOX/master/Universal/ValiantENV.lua"))()
local UIS = game:GetService("UserInputService")
local RenderStepped = RunService.RenderStepped
local Heartbeat = RunService.Heartbeat
local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded.Wait(LocalPlayer.CharacterAdded)
local Backpack = LocalPlayer.Backpack
local Humanoid = Character.WaitForChild(Character, "Humanoid")
local CurrentCamera = Workspace.CurrentCamera
local Mouse = LocalPlayer.GetMouse(LocalPlayer)
local ItemList = ReplicatedStorage.Client.ItemList
local Remotes = game:GetService("ReplicatedStorage")["_CS.Events"]
local mt = getrawmetatable(game)
local backupnamecall = mt.__namecall
local backupnewindex = mt.__newindex
local backupindex = mt.__index 
setreadonly(mt, false)
function returnGun()
	for i,v in pairs(Character:GetChildren()) do
		if v.IsA(v, "Tool") and v.FindFirstChild(v, "MainGunScript") and v.MainGunScript.FindFirstChild(v.MainGunScript, "FireEvent") then
			return v.Name
		end
	end
end
-- // Silent Aim + Anti Kick
hookfunction(LocalPlayer.Kick, warn)
hookfunction(LocalPlayer.kick, warn)


local ValiantAimHacks = loadstring(game:HttpGetAsync("https://raw.githubusercontent.com/Jimmblox/silent-aim/main/module"))()
ValiantAimHacks["TeamCheck"] = false
ValiantAimHacks["HitChance"] = 100

mt.__namecall = newcclosure(function(...)
	local args = {...}
	local method = getnamecallmethod()
	if not checkcaller() then
		if string.lower(method) == "kick" then
			return nil
		end
	end
	return backupnamecall(...)
end)

local randomBodyPart = {
	"Head",
	"UpperTorso",
	"LowerTorso",
	"LeftUpperLeg",
	"RightUpperLeg"
}

mt.__index = newcclosure(function(t, k)
	if not checkcaller() and t:IsA("Mouse") and (k == "Hit" or k == "Target") then
		if ValiantAimHacks.checkSilentAim() then
			local CPlayer = rawget(ValiantAimHacks, "Selected").Character
			local randomNum = math.random(1, 5)
			local targetPart = rawget(randomBodyPart, randomNum) -- // bc of stoopid "anti aimbot" that limits legit players
			if CPlayer and CPlayer.FindFirstChild(CPlayer, targetPart) then
				return (k == "Hit" and CPlayer[targetPart].CFrame or CPlayer[targetPart])
			end
		end
	end
	return backupindex(t, k)
end)
print('Done Silent Aim!')
----------------------------------------------------- silent aim stuff
-- New example script written by wally
-- You can suggest changes with a pull request or something

local repo = 'https://raw.githubusercontent.com/wally-rblx/LinoriaLib/main/'

local Library = loadstring(game:HttpGet(repo .. 'Library.lua'))()
local ThemeManager = loadstring(game:HttpGet(repo .. 'addons/ThemeManager.lua'))()
local SaveManager = loadstring(game:HttpGet(repo .. 'addons/SaveManager.lua'))()

local Window = Library:CreateWindow({
	-- Set Center to true if you want the menu to appear in the center
	-- Set AutoShow to true if you want the menu to appear when it is created
	-- Position and Size are also valid options here
	-- but you do not need to define them unless you are changing them :)

	Title = 'Anomifier',
	Center = true, 
	AutoShow = true,
})

-- You do not have to set your tabs & groups up this way, just a prefrence.
local Tabs = {
	-- Creates a new tab titled Main
	Main = Window:AddTab('Combat'), 
	['UI Settings'] = Window:AddTab('UI Settings'),
}

-- Groupbox and Tabbox inherit the same functions
-- except Tabboxes you have to call the functions on a tab (Tabbox:AddTab(name))
local LeftGroupBox = Tabs.Main:AddLeftGroupbox('Silent Aim')
local hitboxtab = Tabs.Main:AddRightGroupbox('Hitbox Extender')
local misctab = Tabs.Main:AddLeftGroupbox('Miscellanous')
local healtab = Tabs.Main:AddRightGroupbox('Health')

-- Tabboxes are a tiny bit different, but here's a basic example:
--[[

local TabBox = Tabs.Main:AddLeftTabbox() -- Add Tabbox on left side

local Tab1 = TabBox:AddTab('Tab 1')
local Tab2 = TabBox:AddTab('Tab 2')

-- You can now call AddToggle, etc on the tabs you added to the Tabbox
]]

-- Groupbox:AddToggle
-- Arguments: Index, Options
LeftGroupBox:AddToggle('MyToggle', {
	Text = 'Silent Aim Toggle',
	Default = false, -- Default value (true / false)
	Tooltip = 'Disables or enables the silent aim you idiot', -- Information shown when you hover over the toggle
})

hitboxtab:AddToggle('toggleextender', {
	Text = 'Hitbox Extender Toggle',
	Default = false,
	Tooltip = 'Disables or enables the hitbox extender',
})

misctab:AddToggle('togglestamina', {
	Text = 'Infinite Stamina Toggle',
	Default = false,
	Tooltip = 'simple',
})

misctab:AddToggle('toggleinfjump', {
	Text = 'Infinite Jump Toggle',
	Default = false,
	Tooltip = 'simple',
})

healtab:AddToggle('toggleautoheal', {
	Text = 'Auto Heal Toggle',
	Default = false,
	Tooltip = 'You need to be crafter or paramedic for this to work, slide the slider to the minimum health u want to start healing at.',
})


-- Fetching a toggle object for later use:
-- Toggles.MyToggle.Value

-- Toggles is a table added to getgenv() by the library
-- You index Toggles with the specified index, in this case it is 'MyToggle'
-- To get the state of the toggle you do toggle.Value
local function disableStam(enabled)
	repeat wait() until LocalPlayer.Character.HumanoidRootPart.Anchored == false       
	for i,x in pairs(LocalPlayer.Character:GetChildren()) do
		if x:IsA("LocalScript") and x.Name ~= "KeyDrawer" and x.Name ~= "Animate" and x.Name ~= "AnimationHandler" then 
			if enabled == true then
				x.Disabled = true
			else
				x.Disabled = false
			end
		end 
	end 
end
------------------------------ inf stamina
-- Calls the passed function when the toggle is updated
Toggles.MyToggle:OnChanged(function()
	-- here we get our toggle object & then get its value
	print('MyToggle changed to:', Toggles.MyToggle.Value)
	ValiantAimHacks.SilentAimEnabled = Toggles.MyToggle.Value
	ValiantAimHacks.ShowFOV = Toggles.MyToggle.Value
end)

-- This should print to the console: "My toggle state changed! New value: false"
Toggles.MyToggle:SetValue(false)

Toggles.toggleextender:OnChanged(function()
	print('toggleextender change to:', Toggles.toggleextender.Value)
end)

Toggles.toggleextender:SetValue(false)

Toggles.togglestamina:OnChanged(function()
	print('togglestamina change to:', Toggles.togglestamina.Value)
	disableStam(Toggles.togglestamina.Value)
end)

Toggles.togglestamina:SetValue(false)

Toggles.toggleinfjump:OnChanged(function()
	print('toggleinfjump change to:', Toggles.toggleinfjump.Value)
end)

Toggles.toggleautoheal:OnChanged(function()
	print('toggleautoheal change to:', Toggles.toggleautoheal.Value)
end)

function Action(Object, Function)if Object ~= nil then Function(Object); end end
UIS.InputBegan:connect(function(UserInput)
	if Toggles.toggleinfjump.Value == true and UserInput.UserInputType == Enum.UserInputType.Keyboard and UserInput.KeyCode == Enum.KeyCode.Space then
		Action(LocalPlayer.Character.Humanoid, function(self)
			if self:GetState() == Enum.HumanoidStateType.Jumping or self:GetState() == Enum.HumanoidStateType.Freefall then
				Action(self.Parent.HumanoidRootPart, function(self)
					self.Velocity = Vector3.new(0, LocalPlayer.Character.Humanoid.JumpPower, 0);
				end)
			end
		end)
	end      
end)

Toggles.toggleinfjump:SetValue(false)

UIS.InputBegan:connect(function(key)
	if Toggles.togglestamina.Value == true and key.KeyCode == Enum.KeyCode.LeftShift then
		game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = 23
	end
end)
UIS.InputEnded:connect(function(key)
	if Toggles.togglestamina.Value == true and key.KeyCode == Enum.KeyCode.LeftShift then
		game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = 13
	end
end)
-- Groupbox:AddButton
-- Arguments: Text, Callback

--[[local MyButton = LeftGroupBox:AddButton('Button', function()
	print('You clicked a button!')
end)

-- Button:AddButton
-- Arguments: Text, Callback
-- Adds a sub button to the side of the main button

local MyButton2 = MyButton:AddButton('Sub button', function()
	print('You clicked a sub button!')
end)]]

-- Button:AddTooltip
-- Arguments: ToolTip

--MyButton:AddTooltip('This is a button')
--MyButton2:AddTooltip('This is a sub button')

-- NOTE: You can chain the button methods!
--[[
    EXAMPLE: 

    LeftGroupBox:AddButton('Kill all', Functions.KillAll):AddTooltip('This will kill everyone in the game!')
        :AddButton('Kick all', Functions.KickAll):AddTooltip('This will kick everyone in the game!')
]]

-- Groupbox:AddLabel
-- Arguments: Text, DoesWrap
--LeftGroupBox:AddLabel('This is a label')
--LeftGroupBox:AddLabel('This is a label\n\nwhich wraps its text!', true)

-- Groupbox:AddDivider
-- Arguments: None
--LeftGroupBox:AddDivider()

-- Groupbox:AddSlider
-- Arguments: Idx, Options
LeftGroupBox:AddSlider('MySlider', {
	Text = 'Silent Aim FOV',

	-- Text, Default, Min, Max, Rounding must be specified.
	-- Rounding is the number of decimal places for precision.

	-- Example:
	-- Rounding 0 - 5
	-- Rounding 1 - 5.1
	-- Rounding 2 - 5.15
	-- Rounding 3 - 5.155

	Default = 60,
	Min = 0,
	Max = 1000,
	Rounding = 0,

	Compact = false, -- If set to true, then it will hide the label
})

hitboxtab:AddSlider('hitboxslider', {
	Text = 'Hitbox Extender Size',

	-- Text, Default, Min, Max, Rounding must be specified.
	-- Rounding is the number of decimal places for precision.

	-- Example:
	-- Rounding 0 - 5
	-- Rounding 1 - 5.1
	-- Rounding 2 - 5.15
	-- Rounding 3 - 5.155

	Default = 1,
	Min = 0,
	Max = 10,
	Rounding = 0,

	Compact = false, -- If set to true, then it will hide the label
})

healtab:AddSlider('healslider', {
	Text = 'Auto Heal Minimum Health',

	-- Text, Default, Min, Max, Rounding must be specified.
	-- Rounding is the number of decimal places for precision.

	-- Example:
	-- Rounding 0 - 5
	-- Rounding 1 - 5.1
	-- Rounding 2 - 5.15
	-- Rounding 3 - 5.155

	Default = 1,
	Min = 1,
	Max = 100,
	Rounding = 0,

	Compact = false, -- If set to true, then it will hide the label
})


-- Options is a table added to getgenv() by the library
-- You index Options with the specified index, in this case it is 'MySlider'
-- To get the value of the slider you do slider.Value

local Number = Options.MySlider.Value
Options.MySlider:OnChanged(function()
	print('MySlider was changed! New value:', Options.MySlider.Value)
	ValiantAimHacks.FOV = Options.MySlider.Value
end)

-- This should print to the console: "MySlider was changed! New value: 3"
Options.MySlider:SetValue(60)

local valuething = Options.hitboxslider.Value
Options.hitboxslider:OnChanged(function()
	print('MySlider was changed! New value:', Options.hitboxslider.Value)
end)

-- This should print to the console: "MySlider was changed! New value: 3"
Options.hitboxslider:SetValue(1)

Options.healslider:OnChanged(function()
	print('healslider was changed! New value:', Options.healslider.Value)
end)

-- This should print to the console: "MySlider was changed! New value: 3"
Options.healslider:SetValue(1)
function purchaseItem(name)game:GetService("ReplicatedStorage"):FindFirstChild("_CS.Events").PurchaseTeamItem:FireServer(name,"Single",nil)end
game:GetService("RunService").RenderStepped:connect(function()  
	if LocalPlayer.Character.Humanoid.Health < Options.healslider.Value and LocalPlayer.Character.Humanoid.Health > 0 and Toggles.toggleautoheal.Value == true then        
		if not LocalPlayer.Backpack:FindFirstChild("Medi Kit") then
			purchaseItem("Medi Kit")         
		else                     
			for _, t in ipairs(LocalPlayer.Backpack:GetChildren()) do
				if t:IsA("Tool") and t.Name == "Medi Kit" then          
					LocalPlayer.Character.Humanoid:EquipTool(t)            
					game:GetService("ReplicatedStorage"):FindFirstChild("_CS.Events").ToolEvent:FireServer("Heal",LocalPlayer.Character, t)  
				end
			end
		end
	end 
end)


-- Groupbox:AddInput
-- Arguments: Idx, Info
--[[LeftGroupBox:AddInput('MyTextbox', {
	Default = 'My textbox!',
	Numeric = false, -- true / false, only allows numbers
	Finished = false, -- true / false, only calls callback when you press enter

	Text = 'This is a textbox',
	Tooltip = 'This is a tooltip', -- Information shown when you hover over the textbox

	Placeholder = 'Placeholder text', -- placeholder text when the box is empty
	-- MaxLength is also an option which is the max length of the text
})]]

--[[Options.MyTextbox:OnChanged(function()
	print('Text updated. New text:', Options.MyTextbox.Value)
end)]]

-- Groupbox:AddDropdown
-- Arguments: Idx, Info

LeftGroupBox:AddDropdown('MyDropdown', {
	Values = { 'Torso', 'Right Leg', 'Left Leg', 'Head', 'Right Arm', 'Left Arm', 'Random' },
	Default = 7, -- number index of the value / string
	Multi = false, -- true / false, allows multiple choices to be selected

	Text = 'Silent Aim Part',
	Tooltip = 'The part it shoots at', -- Information shown when you hover over the textbox
})

Options.MyDropdown:OnChanged(function()
	print('Dropdown got changed. New value:', Options.MyDropdown.Value)
end)

Options.MyDropdown:SetValue('Random')

hitboxtab:AddDropdown('hitboxdropdown', {
	Values = { 'Torso', 'Head' },
	Default = 2, -- number index of the value / string
	Multi = false, -- true / false, allows multiple choices to be selected

	Text = 'Hitbox Part',
	Tooltip = 'The part it extends', -- Information shown when you hover over the textbox
})

Options.hitboxdropdown:OnChanged(function()
	print('hitboxdropdown got changed. New value:', Options.hitboxdropdown.Value)
end)

Options.hitboxdropdown:SetValue('Head')

-- Multi dropdowns
--[[LeftGroupBox:AddDropdown('MyMultiDropdown', {
	-- Default is the numeric index (e.g. "This" would be 1 since it if first in the values list)
	-- Default also accepts a string as well

	-- Currently you can not set multiple values with a dropdown

	Values = { 'This', 'is', 'a', 'dropdown' },
	Default = 1, 
	Multi = true, -- true / false, allows multiple choices to be selected

	Text = 'A dropdown',
	Tooltip = 'This is a tooltip', -- Information shown when you hover over the textbox
})

Options.MyMultiDropdown:OnChanged(function()
	-- print('Dropdown got changed. New value:', )
	print('Multi dropdown got changed:')
	for key, value in next, Options.MyMultiDropdown.Value do
		print(key, value) -- should print something like This, true
	end
end)]]

--[[Options.MyMultiDropdown:SetValue({
	This = true,
	is = true,
})]]

-- Label:AddColorPicker
-- Arguments: Idx, Info

-- You can also ColorPicker & KeyPicker to a Toggle as well

LeftGroupBox:AddLabel('FOV Color'):AddColorPicker('ColorPicker', {
	Default = Color3.new(0, 1, 0), -- Bright green
	Title = 'Pick a color', -- Optional. Allows you to have a custom color picker title (when you open it)
})

Options.ColorPicker:OnChanged(function()
	print('Color changed!', Options.ColorPicker.Value)
	print(Options.ColorPicker.Value)
	ValiantAimHacks.FOVColor = Options.ColorPicker.Value
end)

Options.ColorPicker:SetValueRGB(Color3.fromRGB(0, 255, 140))

--[[LeftGroupBox:AddLabel('Keybind'):AddKeyPicker('KeyPicker', {
	-- SyncToggleState only works with toggles. 
	-- It allows you to make a keybind which has its state synced with its parent toggle

	-- Example: Keybind which you use to toggle flyhack, etc.
	-- Changing the toggle disables the keybind state and toggling the keybind switches the toggle state

	Default = 'MB2', -- String as the name of the keybind (MB1, MB2 for mouse buttons)  
	SyncToggleState = false, 


	-- You can define custom Modes but I have never had a use for it.
	Mode = 'Toggle', -- Modes: Always, Toggle, Hold

	Text = 'Auto lockpick safes', -- Text to display in the keybind menu
	NoUI = false, -- Set to true if you want to hide from the Keybind menu,
})

-- OnClick is only fired when you press the keybind and the mode is Toggle
-- Otherwise, you will have to use Keybind:GetState()
Options.KeyPicker:OnClick(function()
	print('Keybind clicked!', Options.KeyPicker.Value)
end)

task.spawn(function()
	while true do
		wait(1)

		-- example for checking if a keybind is being pressed
		local state = Options.KeyPicker:GetState()
		if state then
			print('KeyPicker is being held down')
		end

		if Library.Unloaded then break end
	end
end)]]
spawn(function()
	while wait(1.5) do
		if Toggles.toggleextender.Value == true then
			print(Options.hitboxdropdown.Value)
			pcall(function()                  
				for i,v in pairs(game.Players:GetPlayers()) do
					if v ~= LocalPlayer and v.Character and v.Character:FindFirstChild('Head') and Options.hitboxdropdown.Value == "Head" then
						v.Character.HumanoidRootPart.Size = Vector3.new(2,2,1)
						v.Character.Head.Size = Vector3.new(Options.hitboxslider.Value,Options.hitboxslider.Value,Options.hitboxslider.Value)
						v.Character.Head.Transparency = 0.5
						v.Character.Head.CanCollide = false
						if v.Character.Humanoid.Health == 0 then
							v.Character.Head.Size = LocalPlayer.Character.Head.Size
							v.Character.Head.Transparency = LocalPlayer.Character.Head.Transparency                        
						end
					elseif v ~= LocalPlayer and v.Character and v.Character:FindFirstChild('HumanoidRootPart') and Options.hitboxdropdown.Value == "Torso" then
						v.Character.Head.Size = Vector3.new(1,1,1)
						v.Character.HumanoidRootPart.Size = Vector3.new(Options.hitboxslider.Value,Options.hitboxslider.Value,Options.hitboxslider.Value)
						v.Character.HumanoidRootPart.Transparency = 0.5
						v.Character.HumanoidRootPart.CanCollide = false
						if v.Character.Humanoid.Health == 0 then
							v.Character.HumanoidRootPart.Size = LocalPlayer.Character.HumanoidRootPart.Size
							v.Character.HumanoidRootPart.Transparency = LocalPlayer.Character.HumanoidRootPart.Transparency                        
						end
					end
				end
			end)
		elseif Toggles.toggleextender.Value == false then
			pcall(function()                  
				for i,v in pairs(game.Players:GetPlayers()) do
					if v ~= LocalPlayer then
						v.Character.HumanoidRootPart.Size = Vector3.new(2,2,1)
						v.Character.Head.Size = Vector3.new(1,1,1)
					end
				end
			end)
		end
	end
end)
------------------------------------------------------------- hitbox extender stuff
--[[Options.KeyPicker:SetValue({ 'MB2', 'Toggle' }) -- Sets keybind to MB2, mode to Hold

-- Library functions
-- Sets the watermark visibility
Library:SetWatermarkVisibility(true)

-- Sets the watermark text
Library:SetWatermark('This is a really long watermark to text the resizing')

Library.KeybindFrame.Visible = true; -- todo: add a function for this

Library:OnUnload(function()
	print('Unloaded!')
	Library.Unloaded = true
end)]]

-- UI Settings
local MenuGroup = Tabs['UI Settings']:AddLeftGroupbox('Menu')

-- I set NoUI so it does not show up in the keybinds menu
MenuGroup:AddButton('Unload', function() Library:Unload() end)
MenuGroup:AddLabel('Menu bind'):AddKeyPicker('MenuKeybind', { Default = 'End', NoUI = true, Text = 'Menu keybind' }) 

Library.ToggleKeybind = Options.MenuKeybind -- Allows you to have a custom keybind for the menu

-- Addons:
-- SaveManager (Allows you to have a configuration system)
-- ThemeManager (Allows you to have a menu theme system)

-- Hand the library over to our managers
ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)

-- Ignore keys that are used by ThemeManager. 
-- (we dont want configs to save themes, do we?)
SaveManager:IgnoreThemeSettings() 

-- Adds our MenuKeybind to the ignore list 
-- (do you want each config to have a different menu key? probably not.)
SaveManager:SetIgnoreIndexes({ 'MenuKeybind' }) 

-- use case for doing it this way: 
-- a script hub could have themes in a global folder
-- and game configs in a separate folder per game
ThemeManager:SetFolder('MyScriptHub')
SaveManager:SetFolder('MyScriptHub/specific-game')

-- Builds our config menu on the right side of our tab
SaveManager:BuildConfigSection(Tabs['UI Settings']) 

-- Builds our theme menu (with plenty of built in themes) on the left side
-- NOTE: you can also call ThemeManager:ApplyToGroupbox to add it to a specific groupbox
ThemeManager:ApplyToTab(Tabs['UI Settings'])

-- You can use the SaveManager:LoadAutoloadConfig() to load a config 
-- which has been marked to be one that auto loads!
